<%@ Template Language="C#" TargetLanguage="JavaScript" Description="Generates MODEL/COMPONENT/SERVICE for Nodes.js." %>
<%@ Assembly Name="SchemaExplorer" %> <%-- A dll library in either the same directory as the template or in the same directory as the CodeSmith executable --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Database" Description="Database that the documentation should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Database" Description="Select a set of tables." %>
<%--<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table that the Angular objects should be based on." %>--%>
<%--<%@ Map Name="NodejsAlias" Src="MySQL-Nodejs" Description="MySQL to Nodejs Type Map" %>--%>

<%--My static content here.
My dynamic content here: "<%= SampleStringProperty %>"
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
Call a script method: <%= SampleMethod() %>
<% if (SampleBooleanProperty) { %>
My conditional content here.
<% } %>

<% for (int t=0; t<SourceTables.Count; t++) { %>
export class <%=SourceTables[t].Name%> {
<% for (int col = 0; col < SourceTables[t].Columns.Count ; col++) { %>        
    <%= SourceTables[t].Columns[col].Name %>: <%= list[SourceTables[t].Columns[col].SystemType.FullName] %>;
<% } %>
}

<% } %>

--%>
<%--<% MapCollection list = MapCollection.Load("MySQL-Nodejs.csmap");%>
<% list.ReturnKeyWhenNotFound = true; %>
--%>
<% for (int t=0; t<SourceTables.Count; t++) {
    string sourceTableName=SourceTables[t].Name;
    string camelCaseTableName = SourceTables[t].Name;
    camelCaseTableName = Char.ToLowerInvariant(camelCaseTableName[0]) + camelCaseTableName.Substring(1);
    string tableName = SourceTables[t].Name;
    tableName = Char.ToUpperInvariant(tableName[0]) + tableName.Substring(1);
%>

//// START OF  <%=tableName%> MODEL////
const pool = require('./pool');
const NodeCache = require("node-cache");
const cache = new NodeCache({ stdTTL: 120, checkperiod: 600 });

class <%=tableName%> {
    constructor(<%=camelCaseTableName%>) {
    <% for (int col = 0; col < SourceTables[t].Columns.Count ; col++) { %>        
        this.<%= SourceTables[t].Columns[col].Name %> = <%=camelCaseTableName%>.<%= SourceTables[t].Columns[col].Name %>;
    <% } %>
    }
}
//Get All

<%=tableName%>.getAll = (result) => {
    pool.query('SELECT * FROM <%=sourceTableName%>  ORDER BY id', (err, res) => {
        if (err) {
            result(err, null);
        } else {
            result(null, res);
        }
    });
};

//Get by Id
<%=tableName%>.getById = (<%=camelCaseTableName%>Id, result) => {
    cacheValue = cache.get(`<%=camelCaseTableName%>${<%=camelCaseTableName%>Id}`);
    if (cacheValue == undefined) {
        pool.query('SELECT * FROM <%=sourceTableName%> WHERE id = ?', <%=camelCaseTableName%>Id, (err, res) => {
            if (err) {
                result(err, null);
            } else {
                if (res.length === 0) { // The <%=camelCaseTableName%> is not found for the given id
                    result(null, {});
                } else {
                    cache.set(`<%=camelCaseTableName%>${<%=camelCaseTableName%>Id}`, res);
                    result(null, res);
                }
            }
        });
    } else {
        result(null, cacheValue);
    }
};

//create
<%=tableName%>.create<%=tableName%> = (<%=camelCaseTableName%>, result) => {
    pool.query("INSERT INTO <%=sourceTableName%> (<%=GetCommaSepTableNames(tableName, true, "", false)%>) VALUES (<%=GetValues(tableName, true, "", false)%>)", <%=GetCommaSepTableNames(tableName, true, camelCaseTableName + ".", false)%>, (err, res) => {
        if (err) {
            result(err, null);
        } else {
            result(null, { id: res.insertId, <%=GetCommaSepTableNames(tableName, true, camelCaseTableName + ".", true)%> });
        }
    });
};

// update

<%=tableName%>.update<%=tableName%> = (<%=camelCaseTableName%>Id,<%=camelCaseTableName%>, result) => {
    pool.query(`UPDATE <%=sourceTableName%>  SET <%=GetCommaSepTableNames(tableName, true, camelCaseTableName + ".", true,true)%> WHERE id = ${<%=camelCaseTableName%>Id}`,(err, res) => {
        if (err) {
            result(err, null,500);
        } else if(res.affectedRows===0){
            result({ error: 'Record not found' }, null, 404);
        } else {
            cache.del(`<%=camelCaseTableName%>${<%=camelCaseTableName%>Id}`);
            result(null, { id: <%=camelCaseTableName%>Id, <%=GetCommaSepTableNames(tableName, true, camelCaseTableName + ".", true)%> });
        }
    });
};

//remove
<%=tableName%>.delete<%=tableName%> = (<%=camelCaseTableName%>Id, result) => {
    pool.getConnection((conErr, connection) => {
        if (conErr) {
            result(conErr, null, 500);
        } else {
            connection.query(`SELECT * FROM <%=sourceTableName%> WHERE id = ${<%=camelCaseTableName%>Id}`, (selErr, selRes) => {
                if (selErr) {
                    connection.release();
                    return result(selErr, null, 500);
                } else {
                    if (selRes.length === 0) { // The <%=camelCaseTableName%> is not found for the given id
                        result({ error: 'Record not found' }, null, 404);
                        connection.release();
                    } else {
                        // Use one connection to DB for the 2 queries
                        connection.query(`DELETE FROM <%=sourceTableName%> WHERE id = ${<%=camelCaseTableName%>Id}`, (delErr, delRes) => {
                            connection.release();
                            if (delErr) {
                                result(delErr, null, 500);
                            } else {
                                result(null, selRes, 200);
                                cache.del(`<%=camelCaseTableName%>${<%=camelCaseTableName%>Id}`);
                            }
                        });
                    }
                }
            });
        }
    });
};


module.exports = <%=tableName%>;

//// END OF MODEL ////



/////////////////////////////////////////////////////////////////////




//// START OF  <%=tableName%> ROUTER////

const <%=tableName%> = require('../models/<%=camelCaseTableName%>');
const Joi = require('joi');
const express = require('express');
const router = express.Router();


function ValidateModel(<%=camelCaseTableName%>) {
    let schema = Joi.object({
    <% for (int col = 1; col < SourceTables[t].Columns.Count ; col++) { %>        
        <%= SourceTables[t].Columns[col].Name %> : Joi.required(),
    <% } %>
    });
    return schema.validate(<%=camelCaseTableName%>);
}


//Get All
router.get('/', (req, res) => {
    <%=tableName%>.getAll((err, <%=camelCaseTableName%>Res) => {
        if (err) {
            res.status(500).json({ error: err });
        } else {
            res.status(200).json( <%=camelCaseTableName%>Res);
        }
    });
});


//Get by Id

router.get('/:id', (req, res) => {
    const id = req.params.id;
    if (isNaN(id)) // isNaN (is Not a Number) is a function that verifies whether a given string is a normal number
        return res.status(400).send('id should be a number!');

    <%=tableName%>.getById(id, (err, <%=camelCaseTableName%>) => {
        if (err) {
            res.status(500).json({ error: err });
        } else {
            if (Object.keys(<%=camelCaseTableName%>).length === 0) { // here user = {}
                res.status(404).json("Not Found");
            } else {
                res.status(200).json(<%=camelCaseTableName%>);
            }
        }
    });
});


//create

router.post('/', (req, res) => {
    const <%=camelCaseTableName%> = { <%=GetCommaSepTableNames(tableName,true, "req.body.",true)%> };

    const { error } = ValidateModel(<%=camelCaseTableName%>);
    if (error) {
        return res.status(400).send({ error: error });
    }

    <%=tableName%>.create<%=tableName%>(<%=camelCaseTableName%>, (err, <%=camelCaseTableName%>Res) => {
        if (err) {
            res.status(500).json({ error: err });
        } else {
            res.status(201).json(<%=camelCaseTableName%>Res);
        }
    });
});



// update

router.put('/:id', (req, res) => {
    const <%=camelCaseTableName%> = { <%=GetCommaSepTableNames(tableName,true, "req.body.",true)%> };
    const <%=camelCaseTableName%>Id = req.params.id;

    if (isNaN(<%=camelCaseTableName%>Id)) { // isNaN (is Not a Number) is a function that verifies whether a given string is a normal number
        return res.status(400).send('id should be a number!');
    }
    const { error } = ValidateModel(<%=camelCaseTableName%>);
    if (error) {
        return res.status(400).send({ error: error });
    }

    <%=tableName%>.update<%=tableName%>(<%=camelCaseTableName%>Id, <%=camelCaseTableName%>, (err, <%=camelCaseTableName%>Res,code) => {
        if (err) {
            res.status(code).json({ error: err });
        } else {
            res.status(200).json(<%=camelCaseTableName%>Res);
        }
    });
});



//remove

router.delete('/:id', (req, res) => {
    const <%=camelCaseTableName%>Id = req.params.id;
    if (isNaN(<%=camelCaseTableName%>Id)) // isNaN (is Not a Number) is a function that verifies whether a given string is a normal number
        return res.status(400).send('id should be a number!');

    <%=tableName%>.delete<%=tableName%>(<%=camelCaseTableName%>Id, (err, <%=camelCaseTableName%>, code) => {
        if (err) {
            res.status(code).json({ error: err });
        } else {
            res.status(200).json(<%=camelCaseTableName%>);
        }
    });
});


module.exports = router;

//// END OF ROUTER ////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

<% } %>



<script runat="template">
public string GetCommaSepTableNames(string TableName, bool ExceptId, string FieldPrefix, bool withValues,bool backtik=false)
{
    string TableNames = "";
    string FieldName = "";
    for (int col = 0; col < SourceTables[TableName].Columns.Count ; col++)
    {
        FieldName = SourceTables[TableName].Columns[col].Name;
        if (!ExceptId || FieldName.ToUpper() != "ID")
            if (withValues) {
                if(backtik)
                     TableNames +=FieldName + "= " + "\"${"+ FieldPrefix + FieldName + "}\", ";
                    else
                    
                TableNames += FieldName + ": " + FieldPrefix + FieldName + ", ";
            }
            else {
                TableNames += FieldPrefix + FieldName + ", ";
            }
    }
    if (TableNames != "")
        TableNames = TableNames.Substring(0, TableNames.Length - 2);
    
    return TableNames;
}

public string GetValues(string TableName, bool ExceptId, string FieldPrefix, bool withValues)
{
    string values = "";
    string FieldName = "";
    for (int col = 0; col < SourceTables[TableName].Columns.Count ; col++)
    {
        FieldName = SourceTables[TableName].Columns[col].Name;
        if (!ExceptId || FieldName.ToUpper() != "ID")
            values+=" ? ,";
    }
    if (values != "")
        values = values.Substring(0, values.Length - 1);
    
    return values;
}
</script>
